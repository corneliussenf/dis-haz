map2(.y = list(data$MFL, data$FST),
~ bayesplot::ppc_stat(y = ifelse(.y > 0, 1, 0),
yrep = .x,
stat = "mean")) %>%
map2(.y = processes_names, ~ . +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
legend.position = "none") +
scale_fill_manual(values = "grey") +
scale_color_manual(values = "black") +
labs(title = .y, x = "Mean probability", y = "Count")) %>%
patchwork::wrap_plots(.)
ppc_mean
ppc_mean <- pred_posterior_full %>%
map2(.y = list(data$MFL, data$FST),
~ bayesplot::ppc_stat(y = ifelse(.y > 0, 1, 0),
yrep = .x,
stat = "mean")) %>%
map2(.y = processes_names, ~ . +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
legend.position = "none") +
scale_fill_manual(values = "grey") +
scale_color_manual(values = "black") +
labs(title = .y, x = "Mean probability", y = "Count")) %>%
patchwork::wrap_plots(.)
ggsave("ppc_binomial.pdf", ppc_mean, path = "../results/binomial/", width = 5.5, height = 2.5)
ggsave("ppc_binomial.png", ppc_mean, path = "../../../../../results/figures/", width = 5.5, height = 2.5)
estimates <- final_models %>%
map(~ as.data.frame(.) %>%
dplyr::select(-matches("Intercept")) %>% # Select everything that is not an intercept
gather(key = varname, value = value) %>%
left_join(vars_ws, by = "varname")) %>%
set_names(processes_names) %>%
bind_rows(.id = "process") %>%
filter(!varname %in% c(paste0("eco_region", 1:9))) %>%
mutate(name = factor(name, levels = c("Area", "Artificial", "Elevation", "Elevation ratio", "Circularity",
"Melton ratio", "Elongation", "Forest", "Patch density", "Extent",
"Type", "Extent x Type"))) %>%
mutate(type = case_when(name %in% c("Area", "Elevation", "Artificial") ~ "General",
name %in% c ("Elevation ratio", "Circularity", "Melton ratio", "Elongation") ~ "Geomorphology",
name %in% c("Forest", "Patch density", "Extent", "Type", "Extent x Type") ~ "Forest")) %>%
mutate(type = factor(type, levels = c("General", "Geomorphology", "Forest")))
debris <- filter(estimates, process == "Debris-flow" & name == "Forest")
p_estimates <- ggplot(estimates, aes(x = fct_rev(name), y = value)) +
geom_violin(aes(fill = paste0("  ", type))) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank()) +
coord_flip() +
theme(strip.background = element_blank()) +
geom_hline(yintercept = 0, linetype = "dashed", col = scales::muted("red")) +
labs(y = "Effect size", x = NULL) +
#scale_fill_brewer(palette = "Greys", direction = -1) +
facet_wrap(~process) +
scale_fill_manual(values = c("#276419","#ffffbf", "#4393c3"), breaks = c("  General", "  Geomorphology", "  Forest" )) +
theme(legend.title = element_blank())
p_estimates
estimates <- final_models %>%
map(~ as.data.frame(.) %>%
dplyr::select(-matches("Intercept")) %>% # Select everything that is not an intercept
gather(key = varname, value = value) %>%
left_join(vars_ws, by = "varname")) %>%
set_names(processes_names) %>%
bind_rows(.id = "process") %>%
filter(!varname %in% c(paste0("eco_region", 1:9))) %>%
mutate(name = factor(name, levels = c("Area", "Infrastructure", "Elevation", "Elevation ratio", "Circularity",
"Melton ratio", "Elongation", "Forest cover", "Patch density", "Extent",
"Type", "Extent x Type"))) %>%
mutate(type = case_when(name %in% c("Area", "Elevation", "Infrastructure") ~ "General",
name %in% c ("Elevation ratio", "Circularity", "Melton ratio", "Elongation") ~ "Geomorphology",
name %in% c("Forest cover", "Patch density", "Extent", "Type", "Extent x Type") ~ "Forest")) %>%
mutate(type = factor(type, levels = c("General", "Geomorphology", "Forest")))
p_estimates <- ggplot(estimates, aes(x = fct_rev(name), y = value)) +
geom_violin(aes(fill = paste0("  ", type))) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank()) +
coord_flip() +
theme(strip.background = element_blank()) +
geom_hline(yintercept = 0, linetype = "dashed", col = scales::muted("red")) +
labs(y = "Effect size", x = NULL) +
#scale_fill_brewer(palette = "Greys", direction = -1) +
facet_wrap(~process) +
scale_fill_manual(values = c("#276419","#ffffbf", "#4393c3"), breaks = c("  General", "  Geomorphology", "  Forest" )) +
theme(legend.title = element_blank())
p_estimates
estimates$model <- "binomial"
write_csv(estimates, "../results/binomial/estimates_binomial.csv")
response_disturbance <- expand.grid(eco_region = factor(1),
h_mean = 0,
Circularit = 0,
Elongation = 0,
artifical = 0,
area = 0,
patchdensity = 0,
forest = 0,
Elevation = 0,
Melton = 0,
extent = seq(quantile(scale(data$extent), 0),
quantile(scale(data$extent), 0.99),
length.out = 100),
type = c(quantile(data_model$type, 0.05), 0, quantile(data_model$type, 0.95)))  # viele EZGs haben Pulisty kleiner als -1
predictions <- final_models[[1]] %>%
posterior_linpred(., newdata = response_disturbance, transform = TRUE)
response_disturbance[, "mean"] <- apply(predictions, 2, mean)
response_disturbance[, "sd"] <- apply(predictions, 2, sd)
p_response_dfl <- response_disturbance %>%
mutate(type = factor(type, labels =  c("Press", "Average", "Pulse"))) %>%
ggplot(., aes(x = extent, y = mean)) +
geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = type), alpha = 0.3) +
geom_line(aes(col = type)) +
geom_point(data = sample_n(data %>% mutate(extent = as.double(scale(extent))) %>% filter(extent < quantile(extent, 0.99)), 1000),
aes(x = extent, y = -0.01), shape = 124, alpha = 0.3) +
theme_bw() +
theme(legend.background = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
plot.title = element_text(size = 10),
legend.position = c(0, 1),
legend.justification = c(0, 1),
legend.title = element_text(size = 9)) +
scale_color_brewer(palette = "Set1", breaks = c("Press", "Average", "Pulse")) +
scale_fill_brewer(palette = "Set1", breaks = c("Press", "Average", "Pulse")) +
labs(x = "Disturbance extent", y = "Probability of occurrence",
fill = "Disturbance type", col = "Disturbance type",
title = "Debris-flow") +
guides(fill = guide_legend(ncol = 1,
keywidth = 0.1,
keyheight = 0.1,
default.unit = "inch"))
p_response_dfl
p_response_dfl <- response_disturbance %>%
mutate(type = factor(type, labels =  c("Press", "Average", "Pulse"))) %>%
ggplot(., aes(x = extent, y = mean)) +
geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = type), alpha = 0.3) +
geom_line(aes(col = type)) +
geom_point(data = sample_n(data %>% mutate(extent = as.double(scale(extent))) %>% filter(extent < quantile(extent, 0.99)), 1000),
aes(x = extent, y = -0.01), shape = 124, alpha = 0.3) +
theme_bw() +
theme(legend.background = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
plot.title = element_text(size = 10),
legend.position = c(0, 1),
legend.justification = c(0, 1),
legend.title = element_text(size = 9)) +
scale_color_brewer(palette = "Set1", breaks = c("Press", "Average", "Pulse")) +
scale_fill_brewer(palette = "Set1", breaks = c("Press", "Average", "Pulse")) +
labs(x = "Disturbance extent", y = "Probability of occurrence",
fill = "Disturbance type", col = "Disturbance type",
title = "Debris flow") +
guides(fill = guide_legend(ncol = 1,
keywidth = 0.1,
keyheight = 0.1,
default.unit = "inch"))
ggsave("response_curve_binomial.pdf", p_response_dfl, path = "../results/binomial/", width = 3.5, height = 3.5)
ggsave("response_curve_binomial.png", p_response_dfl, path = "../../../../../results/figures/", width = 3.5, height = 3.5)
{
Sys.setenv(USE_CXX14 = 1)
library(raster) # version 2.6-7
library(sp) # version 1.3-1
library(rgdal) # version 1.3-4
library(igraph) # version 1.2.2
library(tidyverse) # version 1.2.1
library(rstanarm) # version 2.17.4
library(projpred )# version 0.8.0
library(multiscales) # version 0.1.0 # devtools::install_github("clauswilke/multiscales")
library(patchwork) # version 0.0.1
library(rstan) # version 2.17.4
library(sf) # version 0.6-3
library(gridExtra) # version 2.3
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
rm(list=ls())
}
data <- read.csv("../data/data_for_model.csv")
processes <- c("MFL", "FST")
processes_names <- c("Debris flow", "Flood")
vars_ws <- data.frame(varname = c("h_mean", "Melton", "Elevation", "Circularit", "Elongation",
"artifical", "forest", "area", "patchdensity",
"eco_region",
"extent",
"type",
"extent:type"),
name = c("Elevation", "Melton ratio", "Elevation ratio", "Circularity", "Elongation",
"Infrastructure", "Forest cover", "Area", "Patch density",
"Ecological region",
"Extent",
"Type",
"Extent x Type"),
stringsAsFactors = FALSE)
models <- vector("list", length = length(processes))
k <- 0
for (process in processes) {
k <- k + 1
# Bring data into form
vars_nointeraction <- vars_ws %>%
filter(!varname %in% c("extent:type", "eco_region"))
data_model <- data
# make sure that have not excpierienced any disturbances have NA as "disturbance type"
data_model[data_model$extent == 0, "type"] <- NA
# z-transform predictors
data_model <- data_model %>%
mutate_at(.vars = vars(c(vars_nointeraction$varname)), function(x) (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE))
# devide dataset in watershed which have had a torrential hazard event (1) and watersheds which had no torrential hazard event (0)
data_model[, "response"] <- data_model[, process]
# make sure that watersheds which have not expierienced any disturbances are set to disturbance type "avarage"
data_model[data_model$extent == min(data_model$extent), "type"] <- 0
# transform eco region predictor to factor
data_model$eco_region <- as.factor(data_model$eco_region)
# Fit null model
fit_null <- stan_glm(response ~ 1,
data = data_model,
family = neg_binomial_2,
prior = normal(0, 0.5, autoscale = TRUE),
prior_intercept = normal(0, 0.5, autoscale = TRUE),
prior_aux = exponential(rate = 1, autoscale = TRUE))
# Calculate loo for null model
loo_fit_null <- loo(fit_null)
# Fit general model
fit_general <- update(fit_null, . ~ . + area + h_mean + artifical + eco_region, QR = TRUE)
# Calculate loo for general model
loo_fit_general <- loo(fit_general)
# Fit general+geomorph model
fit_general_geomorph <- update(fit_general, . ~ . + Elevation + Melton + Circularit + Elongation, QR = TRUE)
# Calculate loo for general+geomorph model
loo_fit_general_geomorph <- loo(fit_general_geomorph)
# Fit general+geomorph+forest model
fit_general_geomorph_forest <- update(fit_general_geomorph, . ~ . + forest + patchdensity, QR = TRUE)
# Calculate loo for general+geomorph+forest model
loo_fit_general_geomorph_forest <- loo(fit_general_geomorph_forest)
# Fit general+geomorph+forest-disturbance model
fit_general_geomorph_forest_disturbances <- update(fit_general_geomorph_forest, . ~ . + extent * type)
# Calculate loo for full model
loo_fit_general_geomorph_forest_disturbances <- loo(fit_general_geomorph_forest_disturbances)
# compare watershed model and full model
model_comparison <- loo::compare(loo_fit_null,
loo_fit_general,
loo_fit_general_geomorph,
loo_fit_general_geomorph_forest,
loo_fit_general_geomorph_forest_disturbances)
model_comparison_direct <- list(loo::compare(loo_fit_null,
loo_fit_general),
loo::compare(loo_fit_general,
loo_fit_general_geomorph),
loo::compare(loo_fit_general_geomorph,
loo_fit_general_geomorph_forest),
loo::compare(loo_fit_general_geomorph_forest,
loo_fit_general_geomorph_forest_disturbances))
model_comparison_direct <- model_comparison_direct %>%
map(~ as.vector(.)) %>%
set_names(c("General",
"Geomorph",
"Forest",
"Disturbances")) %>%
bind_rows() %>%
t() %>%
as.data.frame() %>%
rename_("ELPD difference" = "V1", "SE" = "V2")
# Store everything in a list
models[[k]] <- list(list(fit_null,
fit_general,
fit_general_geomorph,
fit_general_geomorph_forest,
fit_general_geomorph_forest_disturbances),
list(loo_fit_null,
loo_fit_general,
loo_fit_general_geomorph,
loo_fit_general_geomorph_forest,
loo_fit_general_geomorph_forest_disturbances),
model_comparison,
model_comparison_direct)
}
save(models, file = "../results/count/models_count.RData")
load(file =  "../results/count/models_count.RData")
elpd <- models %>%
map(., ~ .[[3]]) %>%
map(., ~ data.frame(ELPD = .[,2])) %>%
map(., ~ rownames_to_column(., var = "predictor")) %>%
set_names(processes_names) %>%
bind_rows(.id = "process") %>%
mutate(predictor = gsub("loo_fit_", "", predictor)) %>%
mutate(ELPD = round(ELPD, 2))
final_models <- models %>% map(., ~ .[[1]][[5]])
pred_posterior_full <- final_models %>%
map(~ posterior_predict(., draws = 100))
ppc_mean <- pred_posterior_full %>%
map2(.y = list(data$FST), # TODO: Add data$DCOMBINE
~ bayesplot::ppc_bars(y = .y,
yrep = .x)) %>%
map2(.y = processes_names, ~ . +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
legend.position = "none") +
labs(title = .y) +
scale_size(limits = c(0, 0.5)) +
scale_y_log10() +
labs(x = "Number of events") +
xlim(-1, 15)) %>%
patchwork::wrap_plots(.)
ppc_mean
ggsave("ppc_count.pdf", ppc_mean, path = "../results/count/", width = 5.5, height = 2.5)
ggsave("ppc_count.png", ppc_mean, path = "../../../../../results/figures/", width = 5.5, height = 2.5)
estimates <- final_models %>%
map(~ as.data.frame(.) %>%
dplyr::select(-matches("Intercept")) %>% # Select everything that is not an intercept
gather(key = varname, value = value) %>%
left_join(vars_ws, by = "varname")) %>%
set_names(processes_names) %>%
bind_rows(.id = "process") %>%
filter(!varname %in% c(paste0("eco_region", 1:9), "reciprocal_dispersion")) %>%
mutate(name = factor(name, levels = c("Area", "Infrastructure", "Elevation", "Elevation ratio", "Circularity",
"Melton ratio", "Elongation", "Forest cover", "Patch density", "Extent",
"Type", "Extent x Type"))) %>%
mutate(type = case_when(name %in% c("Area", "Elevation", "Infrastructure") ~ "General",
name %in% c ("Elevation ratio", "Circularity", "Melton ratio", "Elongation") ~ "Geomorphology",
name %in% c("Forest cover", "Patch density", "Extent", "Type", "Extent x Type") ~ "Forest")) %>%
mutate(type = factor(type, levels = c("General", "Geomorphology", "Forest")))
p_estimates <- ggplot(estimates, aes(x = fct_rev(name), y = value)) +
geom_violin(aes(fill = paste0("  ", type))) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank()) +
coord_flip() +
theme(strip.background = element_blank()) +
geom_hline(yintercept = 0, linetype = "dashed", col = scales::muted("red")) +
labs(y = "Posterior probability distribution of parameter estimates", x = NULL) +
facet_wrap(~process) +
scale_fill_manual(values = c("#276419","#ffffbf", "#4393c3"), breaks = c("  General", "  Geomorphology", "  Forest" )) +
theme(legend.title = element_blank())
p_estimates
estimates$model <- "count"
write_csv(estimates, "../results/count/estimates_count.csv")
ggsave("estimates_count.pdf", p_estimates, path = "../results/count/", width = 5.5, height = 2.5)
ggsave("estimates_count.png", p_estimates, path = "../../../../../results/supplement/", width = 5.5, height = 2.5)
ggsave("ppc_count.png", ppc_mean, path = "../../../../../results/supplement/", width = 5.5, height = 2.5)
response_disturbance <- expand.grid(eco_region = factor(1),
h_mean = 0,
Circularit = 0,
Elongation = 0,
artifical = 0,
area = 0,
patchdensity = 0,
forest = 0,
Elevation = 0,
Melton = 0,
extent = c(quantile(data_model$extent, 0.95), 0, quantile(data_model$extent, 0.05)),
type = c(quantile(data_model$type, 0.05), 0, quantile(data_model$type, 0.95)))  # viele EZGs haben Pulisty kleiner als -1
predictions <- final_models[[1]] %>%
posterior_linpred(., newdata = response_disturbance, transform = TRUE)
response_disturbance[, "mean"] <- apply(predictions, 2, mean)
response_disturbance[, "sd"] <- apply(predictions, 2, sd)
p_response_dfl <- response_disturbance %>%
mutate(type = factor(type, labels =  c("Press", "Average", "Pulse"))) %>%
mutate(extent = factor(extent, labels =  c("Low extent", "Average extent", "Large extent"))) %>%
split(list(.$type, .$extent)) %>%
map(~ data.frame(count = 1:3,
prop = dpois(x = 1:3, lambda = .$mean),
prop_lwr = dpois(x = 1:3, lambda = .$mean - .$sd),
prop_upr = dpois(x = 1:3, lambda = .$mean + .$sd))) %>%
bind_rows(.id = "id") %>%
separate("id", c("type", "extent"), "\\.") %>%
mutate(type = factor(type, levels =  c("Press", "Average", "Pulse"))) %>%
mutate(extent = factor(extent, levels =  c("Low extent", "Average extent", "Large extent"))) %>%
ggplot(., aes(x = as.factor(count), y = prop, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = prop_lwr, ymax = prop_upr), position = position_dodge(width = 0.9), width = 0.25) +
theme_bw() +
theme(legend.background = element_blank(),
legend.position = "none",
legend.justification = c(1, 1),
panel.grid = element_blank(),
strip.background = element_blank(),
plot.title = element_text(size = 11)) +
labs(x = "Number of events", y = "Probability",
fill = "Disturbance type", title = "a) Debris-flow") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(~extent) +
ylim(0, 0.15)
p_response_dfl
p_response_dfl <- response_disturbance %>%
mutate(type = factor(type, labels =  c("Press", "Average", "Pulse"))) %>%
mutate(extent = factor(extent, labels =  c("Small extent", "Average extent", "Large extent"))) %>%
split(list(.$type, .$extent)) %>%
map(~ data.frame(count = 1:3,
prop = dpois(x = 1:3, lambda = .$mean),
prop_lwr = dpois(x = 1:3, lambda = .$mean - .$sd),
prop_upr = dpois(x = 1:3, lambda = .$mean + .$sd))) %>%
bind_rows(.id = "id") %>%
separate("id", c("type", "extent"), "\\.") %>%
mutate(type = factor(type, levels =  c("Press", "Average", "Pulse"))) %>%
mutate(extent = factor(extent, levels =  c("Small extent", "Average extent", "Large extent"))) %>%
ggplot(., aes(x = as.factor(count), y = prop, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = prop_lwr, ymax = prop_upr), position = position_dodge(width = 0.9), width = 0.25) +
theme_bw() +
theme(legend.background = element_blank(),
legend.position = "none",
legend.justification = c(1, 1),
panel.grid = element_blank(),
strip.background = element_blank(),
plot.title = element_text(size = 11)) +
labs(x = "Number of events", y = "Probability",
fill = "Disturbance type", title = "a) Debris flow") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(~extent) +
ylim(0, 0.15)
p_response_dfl
response_disturbance <- expand.grid(eco_region = factor(1),
h_mean = 0,
Circularit = 0,
Elongation = 0,
artifical = 0,
area = 0,
patchdensity = 0,
forest = 0,
Elevation = 0,
Melton = 0,
extent = 0,
type = c(quantile(data_model$type, 0.05), 0, quantile(data_model$type, 0.95)))  # viele EZGs haben Pulisty kleiner als -1
predictions <- final_models[[2]] %>%
posterior_linpred(., newdata = response_disturbance, transform = TRUE)
response_disturbance[, "mean"] <- apply(predictions, 2, mean)
response_disturbance[, "sd"] <- apply(predictions, 2, sd)
p_response_fst <- response_disturbance %>%
mutate(type = factor(type, labels =  c("Press", "Average", "Pulse"))) %>%
split(.$type) %>%
map(~ data.frame(count = 1:3,
prop = dpois(x = 1:3, lambda = .$mean),
prop_lwr = dpois(x = 1:3, lambda = .$mean - .$sd),
prop_upr = dpois(x = 1:3, lambda = .$mean + .$sd))) %>%
bind_rows(.id = "type") %>%
mutate(type = factor(type, levels =  c("Press", "Average", "Pulse"))) %>%
ggplot(., aes(x = as.factor(count), y = prop, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = prop_lwr, ymax = prop_upr), position = position_dodge(width = 0.9), width = 0.25) +
theme_bw() +
theme(legend.background = element_blank(),
legend.position = "right",
legend.justification = c(1, 1),
panel.grid = element_blank(),
strip.background = element_blank(),
plot.title = element_text(size = 11)) +
labs(x = "Number of events", y = "Probability",
fill = "Disturbance type", title = "b) Flood") +
scale_fill_brewer(palette = "Set1") +
guides(fill = guide_legend(ncol = 1,
keywidth = 0.15,
keyheight = 0.1,
default.unit = "inch"))
p_response_fst
p_response <- p_response_dfl + p_response_fst + plot_layout(ncol = 2, widths = c(3, 1.1))
p_response
ggsave("expected_counts.pdf", p_response, path = "../results/count/", width = 7.5, height = 5)
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 7.5, height = 5)
estimates <- list.files("../results/", glob2rx("estimates*.csv"), recursive = TRUE, full.names = TRUE) %>%
map(read_csv) %>%
bind_rows() %>%
mutate(name = factor(name, levels = c("Infrastructure", "Elevation","Area",
"Elevation ratio", "Circularity", "Melton ratio", "Elongation",
"Extent x Type", "Extent", "Type", "Patch density", "Forest cover")))
p_estimate <- list(a = estimates %>%
mutate(type = case_when(name %in% c("Forest cover", "Patch density") ~ "Forest",
name %in% c("Extent x Type", "Extent", "Type") ~ "Disturbance",
TRUE ~ type)) %>%
mutate(type = factor(type, levels = c("General", "Geomorphology", "Forest", "Disturbance"))) %>%
mutate(model = factor(model, labels = c("Occurrence", "Frequency"))) %>%
split(.$type),
b = list(NULL, NULL, NULL, "Effect size"),
c = list(element_blank(), element_blank(), element_blank(), element_text()),
d = list(element_text(size = 10), element_blank(), element_blank(), element_blank()),
e = list(element_blank(), element_blank(), element_blank(), element_line()),
f = list("right", "none", "none", "none")) %>%
pmap(.l = ., .f = function (a, b, c, d, e, f) {
ggplot(a, aes(x = name, y = value)) +
geom_violin(aes(fill = model)) +
theme_bw() +
theme(legend.position = f,
legend.title = element_text(size = 9),
panel.grid = element_blank(),
strip.background = element_blank(),
strip.text.x = d,
strip.text.y = element_text(size = 10),
axis.ticks.x = e,
axis.text.y = element_text(size = 10, colour = "black"),
axis.text.x = c,
plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "pt")) +
coord_flip() +
geom_hline(yintercept = 0, linetype = "dashed", col = scales::muted("red")) +
labs(y = b, x = NULL, fill = "Model") +
facet_grid(type~process) +
ylim(-0.9, 0.9) +
scale_fill_brewer(palette = "Greys") +
guides(fill = guide_legend(ncol = 1,
keywidth = 0.15,
keyheight = 0.1,
default.unit = "inch"))
}) %>%
wrap_plots(ncol = 1, heights = c(1, 1.2, 0.6, 1))
p_estimate
ggsave("../results/estimates_combined.pdf", p_estimate, width = 5.5, height = 4.5)
ggsave("../../../../../results/figures/estimates_combined.png", p_estimate, width = 5.5, height = 4.5)
ggsave("../../../../../results/figures/estimates_combined.pdf", p_estimate, width = 5.5, height = 4.5)
p_response <- p_response_dfl + p_response_fst + plot_layout(ncol = 2, widths = c(3, 1.1))
p_response <- p_response_dfl + p_response_fst + plot_layout(ncol = 2, widths = c(3, 1.1))
p_response
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 7.5, height = 5)
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 7.5, height = 3.5)
